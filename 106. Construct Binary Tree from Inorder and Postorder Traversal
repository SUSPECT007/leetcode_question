/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

TreeNode* sol(vector<int>& inorder, vector<int>& postorder,int in_b, int in_e,int pos_b,int pos_e){
    if (in_b>in_e || pos_b>pos_e) return NULL;
    TreeNode* root;root = new TreeNode (postorder[pos_e]);
    int i;
    for(i = in_b;i<=in_e;i++) if (inorder[i]==postorder[pos_e]) break;
    root->left=sol(inorder,postorder,in_b,i-1,pos_b,pos_b+i-in_b-1);
    root->right=sol(inorder,postorder,i+1,in_e,pos_b+i-in_b,pos_e-1);


    return root;

    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size(); if (n==0) return NULL;
    
        return sol(inorder,postorder,0,n-1,0,n-1);
    }
};
